generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  address        String?
  phone          String? // Ensure this is included
  profilePicture String?  @db.VarChar(512)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  CartItem       CartItem[]
  Order          Order[]
  Wishlist       Wishlist[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float
  description String
  imageUrl    String
  createdAt   DateTime    @default(now())
  categoryId  Int?
  stock       Int
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  colors      Color[]
  orderItems  OrderItem[]
  Category    Category?   @relation(fields: [categoryId], references: [id])
  sizes       Size[]
  wishlist    Wishlist[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Size {
  id        Int     @id @default(autoincrement())
  size      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Size_productId_fkey")
}

model Color {
  id         Int     @id @default(autoincrement())
  colorName  String
  imageUrl   String
  hoverImage String
  productId  Int
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Color_productId_fkey")
}

model Wishlist {
  id            Int     @id @default(autoincrement())
  userId        Int
  productId     Int
  selectedSize  String
  selectedColor String
  quantity      Int     @default(1)
  product       Product @relation(fields: [productId], references: [id])
  user          User    @relation(fields: [userId], references: [id])

  @@index([productId], map: "Wishlist_productId_fkey")
  @@index([userId], map: "Wishlist_userId_fkey")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId], map: "CartItem_productId_fkey")
  @@index([userId], map: "CartItem_userId_fkey")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]

  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}
