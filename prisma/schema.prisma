generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ROOT_ADMIN
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  role           Role     @default(USER)
  address        String?
  phone          String?
  profilePicture String?  @db.VarChar(512)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isVerified     Boolean  @default(false)
  otp            Int?
  otpExpiresAt   DateTime?
  cartItems      CartItem[]
  orders         Order[]
  wishlist       Wishlist[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  price       Float
  description String
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  Int?
  stock       Int
  category    Category?    @relation(fields: [categoryId], references: [id])
  colors      Color[]
  sizes       ProductSize[]
  wishlist    Wishlist[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Size {
  id   Int    @id @default(autoincrement())
  size String @unique
  products ProductSize[]
}

model Color {
  id         Int     @id @default(autoincrement())
  colorName  String
  imageUrl   String
  hoverImage String?
  productId  Int
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "Color_productId_fkey")

  @@index([productId], map: "Color_productId_fkey")
}

model Wishlist {
  id            Int     @id @default(autoincrement())
  userId        Int
  productId     Int
  selectedSize  String?
  selectedColor String?
  quantity      Int     @default(1)
  user          User    @relation(fields: [userId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId, selectedSize, selectedColor])
}

model CartItem {
  id            Int     @id @default(autoincrement())
  userId        Int
  productId     Int
  quantity      Int
  selectedSize  String?
  selectedColor String?
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, selectedSize, selectedColor])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Order_userId_fkey")
  orderItems OrderItem[]

  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderItem_orderId_fkey")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  productId Int
  sizeId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductSize_productId_fkey")
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade, map: "ProductSize_sizeId_fkey")

  @@unique([productId, sizeId], map: "ProductSize_productId_sizeId_key")
  @@index([productId], map: "ProductSize_productId_fkey")
  @@index([sizeId], map: "ProductSize_sizeId_fkey")
}
