generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ROOT_ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  password       String
  name           String
  role           Role       @default(USER)
  address        String?
  phone          String?
  profilePicture String?    @db.VarChar(512)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  isVerified     Boolean    @default(false)
  otp            Int?
  otpExpiresAt   DateTime?
  cartItems      CartItem[]
  orders         Order[]
  wishlist       Wishlist[]
  payments       Payment[]
  fitnessPurchases FitnessPurchase[]
  fitnessSubscriptions FitnessSubscription[]
}

model Product {
  id           Int                  @id @default(autoincrement())
  stock        Int
  price        Float
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  categoryId   Int?
  category     Category?            @relation(fields: [categoryId], references: [id])
  colors       Color[]
  sizes        ProductSize[]
  wishlist     Wishlist[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  translations ProductTranslation[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model ProductTranslation {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  language    String
  name        String
  description String    @db.Text
  imageUrl    String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([productId, language], map: "ProductTranslation_unique")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Size {
  id       Int           @id @default(autoincrement())
  size     String        @unique
  products ProductSize[]
}

model Color {
  id         Int     @id @default(autoincrement())
  colorName  String
  imageUrl   String  @db.Text
  hoverImage String? @db.Text
  position   Int     @default(0)
  productId  Int
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "Color_productId_fkey")

  @@index([productId], map: "Color_productId_fkey")
}

model Wishlist {
  id            Int     @id @default(autoincrement())
  userId        Int
  productId     Int
  selectedSize  String?
  selectedColor String?
  quantity      Int     @default(1)
  user          User    @relation(fields: [userId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId, selectedSize, selectedColor])
}

model CartItem {
  id            Int     @id @default(autoincrement())
  userId        Int
  productId     Int
  name          String  @default("") // New required field with default value for existing rows
  quantity      Int
  selectedSize  String?
  selectedColor String?
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, selectedSize, selectedColor])
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Order_userId_fkey")
  orderItems OrderItem[]
  payment    Payment?    @relation("OrderPayment")

  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderItem_orderId_fkey")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  productId Int
  sizeId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductSize_productId_fkey")
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade, map: "ProductSize_sizeId_fkey")

  @@unique([productId, sizeId], map: "ProductSize_productId_sizeId_key")
  @@index([productId], map: "ProductSize_productId_fkey")
  @@index([sizeId], map: "ProductSize_sizeId_fkey")
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int?          @unique
  userId          Int
  stripeSessionId String        @unique
  amount          Float
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  order           Order?        @relation("OrderPayment", fields: [orderId], references: [id])
}

// Fitness Program Models
model FitnessProgram {
  id          Int              @id @default(autoincrement())
  title       String
  description String           @db.Text
  image       String           @db.Text
  video       String?          @db.Text
  pdfUrl      String?          @db.Text
  price       Float
  stripePriceId String?        @unique
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  purchases   FitnessPurchase[]
}

model FitnessPurchase {
  id              Int            @id @default(autoincrement())
  userId          Int
  programId       Int
  stripeSessionId String         @unique
  amount          Float
  status          PaymentStatus  @default(PENDING)
  purchasedAt     DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  program         FitnessProgram @relation(fields: [programId], references: [id])

  @@unique([userId, programId])
}

model FitnessSubscription {
  id              Int           @id @default(autoincrement())
  userId          Int           @unique
  stripeSessionId String        @unique
  stripePriceId   String
  status          PaymentStatus @default(PENDING)
  startedAt       DateTime      @default(now())
  expiresAt       DateTime?
  user            User          @relation(fields: [userId], references: [id])
}
